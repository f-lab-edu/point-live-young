name: ci/cd to ec2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]


jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 21 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: 빌드하기
        run: ./gradlew clean build -x test


  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: ci
    runs-on: ubuntu-latest
    concurrency: :
      group: 'deploy-to-ec2'
      cancel-in-progress: true

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 21 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: AWS Resource에 접근할 수 있게 AWS  Credentials 설정하기
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t pointliveyoung-server .

      - name: Dokcer 이미지 태그 붙이기
        run: docker tag pointliveyoung-server ${{ steps.login-ecr.outputs.registry }}/pointliveyoung-server:latest

      - name: ECR에 Docker 이미지 push
        run: docker push ${{steps.login-ecr.outputs.registry }}/pointliveyoung-server:latest

      - name: SSH로 EC2 접속
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          command_timeout: 30m
          request_pty: false
          debug: true
          script: |
            docker stop pointliveyoung-server || true
            docker rm pointliveyoung-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/pointliveyoung-server:latest
            docker run -d --name pointliveyoung-server -p 8080:8080 \
              -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              ${{ steps.login-ecr.outputs.registry }}/pointliveyoung-server:latest

            docker ps --filter "name=pointliveyoung-server"